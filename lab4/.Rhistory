quit()
ls
ls()
quit()
library('GISTools')
install.packages('GISTools')
install.packages("~/Downloads/GISTools_0.7-1.tar", repos = NULL)
install.packages("~/Downloads/GISTools_0.7-1.tar", repos = NULL)
install.packages("~/Downloads/GISTools_0.7-1.tar", repos = NULL,type='source')
install.packages("~/Downloads/GISTools_0.7-1.tar", repos = NULL,type='binary')
install.packages("~/Downloads/GISTools_0.7-1-3.tar", repos = NULL)
install.packages("~/Downloads/GISTools_0.7-1-3.tar", repos = NULL,type='binary')
library('GISTools')
install.packages("~/Downloads/GISTools_0.7-1.tar", repos = NULL,type='source')
install.packages("~/Downloads/GISTools_0.7.tar", repos = NULL,type='source')
install.packages("~/Downloads/GISTools_0.7-1.tar", repos = NULL)
install.packages("~/Downloads/GISTools_0.7-1.tar", repos = NULL,type='source')
Rversion
rversion
R.version
install.packages('GISTools')
R.version
install.packages('GISTools')
R.version
install.packages("~/Downloads/GISTools_0.7-1.tar", repos = NULL)
install.packages("~/Downloads/GISTools_0.7-1.tar", repos = NULL,type='binary')
install.packages("~/Downloads/GISTools_0.7-1.tar", repos = NULL,type='source')
install.packages("~/Downloads/GISTools_0.7-1.tar", repos = NULL)
install.packages("~/Downloads/GISTools_0.7-1.tar", repos = NULL,type='source')
library('GISTools')
q()
install.packages("tidyverse")
library(tidyverse)
data()
data()
view(mpg)
names(mpg)
summary(mpg)
view(mpg)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)
+
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(mpg,aes(dipl,hwy))+
geom_point()
ggplot(mpg,aes(dipl,hwy))+
geom_point()
ggplot(mpg,aes(displ,hwy))+
geom_point()
ggplot(mpg,aes(displ,hwy))+
geom_point(size=3)
ggplot(mpg,aes(displ,hwy))+
geom_point(size=3,color='red')
ggplot(data = mpg, mapping = aes(x = displ, y = hwy))+
geom_point()
ggplot(mpg,aes(displ,hwy))+
geom_point(size=3,color='red')
ggplot(mpg,aes(displ,hwy))+
geom_point(size=1,color='red')
ggplot(mpg,aes(displ,hwy))+
geom_point(size=3,color='red')
ggplot(mpg,aes(displ,hwy))+
geom_point(size=3,color='red')+
labs(title='mpg plot')
ggplot(mpg,aes(displ,hwy))+
geom_point(size=3,color='red')+
labs(title='mpg plot')+
theme_bw()
ggplot(mpg,aes(displ,hwy))+
geom_point(size=3,color='red')+
labs(title='mpg plot')+
theme_bw(base_size = 11)
ggplot(mpg,aes(displ,hwy))+
geom_point(size=3,color='red')+
labs(title='mpg plot')+
theme_bw(base_size = 20)
ggplot(mpg,aes(displ,hwy))+
geom_point(size=3,color='blue')+
labs(title='mpg plot')+
theme_bw(base_size = 20)
ggplot(mpg,aes(displ,hwy))+
geom_point(size=3,color='blue')+
labs(title='MPG plot')+
theme_bw(base_size = 20)
ggplot(mpg,aes(displ,hwy))+
geom_point(size=3,color='blue')+
labs(title='MPG plot',theme(plot.title = element_text(hjust = 0.5)))+
theme_bw(base_size = 20)
ggplot(mpg,aes(displ,hwy))+
geom_point(size=3,color='blue')+
ggtile('MPG plot',theme(plot.title = element_text(hjust = 0.5)))+
theme_bw(base_size = 20)
ggplot(mpg,aes(displ,hwy))+
geom_point(size=3,color='blue')+
ggtitle('MPG plot',theme(plot.title = element_text(hjust = 0.5)))+
theme_bw(base_size = 20)
ggplot(mpg,aes(displ,hwy))+
geom_point(size=3,color='blue')+
ggtitle('MPG plot')
theme_bw(base_size = 20,plot.title = element_text(hjust = 0.5))
ggplot(mpg,aes(displ,hwy))+
geom_point(size=3,color='blue')+
ggtitle('MPG plot')+
theme_bw(base_size = 20,plot.title = element_text(hjust = 0.5))
ggplot(mpg,aes(displ,hwy))+
geom_point(size=3,color='blue')+
ggtitle('MPG plot')+
theme(base_size = 20,plot.title = element_text(hjust = 0.5))
ggplot(mpg,aes(displ,hwy))+
geom_point(size=3,color='blue')+
ggtitle('MPG plot')+
theme(plot.title = element_text(hjust = 0.5))
ggplot(mpg,aes(displ,hwy))+
geom_point(size=3,color='blue')+
ggtitle('MPG plot')+
theme(plot.title = element_text(hjust = 0.5))+
theme_bw()
ggplot(mpg,aes(displ,hwy))+
geom_point(size=3,color='blue')+
ggtitle('MPG plot')+
theme_bw(plot.title = element_text(hjust = 0.5))
ggplot(mpg,aes(displ,hwy))+
geom_point(size=3,color='blue')+
ggtitle('MPG plot')+
theme_bw()
ggplot(mpg,aes(displ,hwy))+
geom_point(size=3,color='blue')+
labs(x='Engine Size',y='Fuel efficiency')
ggtitle('MPG plot')+
theme_bw()
ggplot(mpg,aes(displ,hwy))+
geom_point(size=3,color='blue')+
labs(x='Engine Size',y='Fuel efficiency')
ggtitle('MPG plot')+
theme_bw(base_size = 20)
ggplot(mpg,aes(displ,hwy))+
geom_point(size=3,color='blue')+
labs(x='Engine Size',y='Fuel efficiency')
title('MPG plot')+
theme_bw(base_size = 20)
ggplot(mpg,aes(displ,hwy))+
geom_point(size=3,color='blue')+
labs(x='Engine Size',y='Fuel efficiency',title='MPG Plot')
theme_bw(base_size = 20)
ggplot(mpg,aes(displ,hwy))+
geom_point(size=3,color='blue')+
labs(x='Engine Size',y='Fuel efficiency',title='MPG Plot')
theme_bw(base_size = 30)
ggplot(mpg,aes(displ,hwy))+
geom_point(size=3,color='blue')+
labs(x='Engine Size',y='Fuel efficiency',title='MPG Plot')+
theme_bw(base_size = 30)
ggplot(mpg,aes(displ,hwy))+
geom_point(size=3,color='blue')+
labs(x='Engine Size',y='Fuel efficiency',title='MPG Plot')+
theme_bw(base_size = 20)
library(rspatial)
install.packages('rspatial')
remotes::install_github('rspatial/rspatial')
library(rspatial)
p<-sp_data('preciipitation.csv')
cts<-sp_data('counties.rds')
p<-sp_data('precipitation.csv')
p
head(p)
plot(cts)
points(p[,c('LONG','LAT')])
class(p)
class(cts)
p$pan<-rowSums(p[,6:17])
plot(p$pan)
m<-lm(pan~ALT,data=p)
summary(m)
library(sf)
pt <- st_point(c(0,1))
plot(pt)
pol <- st_polygon(list(rbind(c(0,0), c(1,0), c(1,1), c(0,1), c(0,0))))
plot(pol)
pol <- st_polygon(list(rbind(c(0,0), c(1,0), c(1,2), c(0,1), c(0,0))))
plot(pol)
pol <- st_polygon(list(rbind(c(0,0), c(1,0), c(1,2), c(0,1), c(0,0.5))))
pol <- st_polygon(list(rbind(c(0,0), c(1,0), c(1,2), c(0,0.5), c(0,0))))
plot(pol)
typeof(pol)
class(pol)
class(point)
class(pt)
typeof(pt)
library(sf)
# Define longitude and latitude
lon <- 0  # Example longitude (for Greenwich, UK)
lat <- 51.5  # Example latitude (for Greenwich, UK)
# Create a point feature
point <- st_point(c(lon, lat))  # Create the point
# Convert to a simple feature object
point_sf <- st_sf(geometry = st_sfc(point))
# Print the point feature
print(point_sf)
# If you want the point to be in a specific Coordinate Reference System (CRS), you can set it using:
point_sf <- st_set_crs(point_sf, 4326)  # 4326 is the EPSG code for WGS 84
library(mapview)
mapview(point_sf)
point
print(point_sf)
plot(cars)
install.packages('plotly')
install.packages('ggplot2')
setwd("~/work")
setwd("~/work/Geog4254-5254G/lab4")
library(tidyverse)
library(tidycensus)
library(sf)
library(tigris)
washington_metro_counties <- c(
"District of Columbia" = "11001",
"Maryland" = c("24031", "24033", "24021", "24017"),
"Virginia" = c("51013", "51059", "51107", "51153", "51510", "51600", "51610", "51683", "51685")
)
acs_data_list <- lapply(names(washington_metro_counties), function(state) {
counties <- washington_metro_counties[[state]]
lapply(counties, function(county) {
get_acs(geography = "tract",
variables = c("B01001_001E"), # Example variable: Total population
state = state,
county = county,
year = 2021,
survey = "acs5",
output = "wide")
})
})
washington_metro_counties <- c(
"District of Columbia" = "11",
"Maryland" = c("24031", "24033", "24021", "24017"),
"Virginia" = c("51013", "51059", "51107", "51153", "51510", "51600", "51610", "51683", "51685")
)
acs_data_list <- lapply(names(washington_metro_counties), function(state) {
counties <- washington_metro_counties[[state]]
lapply(counties, function(county) {
get_acs(geography = "tract",
variables = c("B01001_001E"), # Example variable: Total population
state = state,
county = county,
year = 2021,
survey = "acs5",
output = "wide")
})
})
washington_metro_counties <- c(
"District of Columbia" = "11",
"Maryland" = c("24031", "24033", "24021", "24017"),
"Virginia" = c("51013", "51059", "51107", "51153", "51510", "51600", "51610", "51683", "51685")
)
acs_data_list <- lapply(names(washington_metro_counties), function(state) {
counties <- washington_metro_counties[[state]]
lapply(counties, function(county) {
get_acs(geography = "tract",
variables = c("B01001_001E"), # Example variable: Total population
state = state,
county = county,
year = 2021,
survey = "acs5",
output = "wide")
})
})
washington_metro_counties <- list(
"DC" = "001",
"MD" = c("031", "033", "021", "017"),
"VA" = c("013", "059", "107", "153", "510", "600", "610", "683", "685")
)
acs_data_list <- lapply(names(washington_metro_counties), function(state) {
counties <- washington_metro_counties[[state]]
lapply(counties, function(county) {
tryCatch({
get_acs(geography = "tract",
variables = c("B01001_001E"), # Example variable: Total population
state = state,
county = county,
year = 2021,
survey = "acs5",
output = "wide")
}, error = function(e) {
message(paste("Error retrieving data for state:", state, "county:", county))
NULL
})
})
})
acs_data <- do.call(rbind, unlist(acs_data_list, recursive = FALSE))
plot(acs_data)
washington_metro_counties <- list(
"DC" = "001",
"MD" = c("031", "033", "021", "017"),
"VA" = c("013", "059", "107", "153", "510", "600", "610", "683", "685")
)
acs_data_list <- lapply(names(washington_metro_counties), function(state) {
counties <- washington_metro_counties[[state]]
lapply(counties, function(county) {
tryCatch({
get_acs(geography = "tract",
variables = c("B01001_001E"), # Example variable: Total population
state = state,
county = county,
year = 2021,
survey = "acs5",
geometry = TRUE)
}, error = function(e) {
message(paste("Error retrieving data for state:", state, "county:", county))
NULL
})
})
})
acs_data <- do.call(rbind, unlist(acs_data_list, recursive = FALSE))
washington_metro_counties <- list(
"DC" = "001",
"MD" = c("031", "033", "021", "017"),
"VA" = c("013", "059", "107", "153", "510", "600", "610", "683", "685")
)
acs_data_list <- lapply(names(washington_metro_counties), function(state) {
counties <- washington_metro_counties[[state]]
lapply(counties, function(county) {
tryCatch({
get_acs(geography = "tract",
variables = c("B01001_001E"), # Example variable to ensure we get the data
state = state,
county = county,
year = 2021,
survey = "acs5",
geometry = TRUE) %>%
select(GEOID, geometry)
}, error = function(e) {
message(paste("Error retrieving data for state:", state, "county:", county))
NULL
})
})
})
acs_data <- do.call(rbind, unlist(acs_data_list, recursive = FALSE))
plot(acs_data)
library(mapview)
install.packages('raster')
library(mapview)
mapview(acs_data)
ncr_counties <- list(
"DC" = "001",
"MD" = c("031", "033", "017", "021", "005", "009", "013", "027"),
"VA" = c("013", "059", "107", "153", "510", "600", "610", "683", "685", "047", "061", "169", "179")
)
acs_data_list <- lapply(names(ncr_counties), function(state) {
counties <- ncr_counties[[state]]
lapply(counties, function(county) {
tryCatch({
get_acs(geography = "tract",
variables = c("B01001_001E"), # Example variable to ensure we get the data
state = state,
county = county,
year = 2021,
survey = "acs5",
geometry = TRUE) %>%
select(GEOID, geometry)
}, error = function(e) {
message(paste("Error retrieving data for state:", state, "county:", county))
NULL
})
})
})
acs_data <- do.call(rbind, unlist(acs_data_list, recursive = FALSE))
mapview(acs_data)
ls()
list.files()
a<-st_read('P1572324549-2024-06-0618503623-MapLayer.json')
plot(a)
st_write(a,'dmv.shp')
mapview(a)
acs_data <- get_acs(geography = "tract",
variables = "B19013_001",
state = c("DC", "MD", "VA"),
geometry = TRUE)
plot(acs_data)
acs_data <- get_acs(geography = "tract",
variables = "B19013_001",
state = c("DC", "MD", "VA","WV"),
geometry = TRUE)
plot(acs_data)
head(acs_data)
acs_data <- get_acs(geography = "tract",
variables = "B19013_001",
state = c("DC", "MD", "VA","WV"),
geometry = TRUE)
colnames(acs_data) <- c("GEOID", "NAME", "variable","Median_Income", "moe","geometry")
head(acs_data)
dmv<-st_read('dmv.shp')
head(dmv)
dmv<-st_read('dmv.shp')
plot(dmv)
st_crs(dmv)
st_crs(acs_data)
# Perform the spatial join
dmv_data <- st_join(dmv, acs_data, join = st_intersects)
# Transform the CRS of the ACS data to match the DMV shapefile
acs_data <- st_transform(acs_data, st_crs(dmv))
# Perform the spatial join
dmv_data <- st_join(dmv, acs_data, join = st_intersects)
dmv<-st_read('dmv.shp')
invalid_geometries <- st_is_valid(dmv_shapefile, reason = TRUE)
dmv<-st_read('dmv.shp')
invalid_geometries <- st_is_valid(dmv, reason = TRUE)
print(invalid_geometries)
plot(dmv)
dmv<-st_read('dmv.shp')
dmv<- st_make_valid(dmv)
plot(dmv)
st_write(dmv,'dmv.shp')
st_write(dmv,'dmv.shp',append = 'FALSE')
st_write(dmv,'dmv.shp',append = FALSE)
dmv<-st_read('dmv.shp')
plot(dmv)
dmv<-st_read('dmv.shp')
plot(dmv)
# Transform the CRS of the ACS data to match the DMV shapefile
acs_data <- st_transform(acs_data, st_crs(dmv))
# Perform the spatial join
dmv_data <- st_join(dmv, acs_data, join = st_intersects)
head(dmv_data)
plot(dmv_data)
dmv_data$Median_Income
head(dmv_data)
plot(dmv_data["Median_Income"])
mapview(dmv_ata,z="Median_Income")
mapview(dmv_data,z="Median_Income")
# Calculate the Gini index for the entire DMV area
gini_index <- Gini(dmv_data$Median_Income)
library(ineq)
install.packages('ineq')
library(ineq)
# Calculate the Gini index for the entire DMV area
gini_index <- Gini(dmv_data$Median_Income)
# Print the Gini index
print(gini_index)
library(ineq)
gini_index <- Gini(dmv_data$Median_Income)
# Print the Gini index
print(gini_index)
st_write(dmv_data, "acs_data_dmv.shp")
install.packages('tmap')
library(tmap)
# Map the median income
tm_shape(dmv_data) +
tm_polygons("median_income",
style = "quantile",
palette = "Blues",
title = "Median Household Income") +
tm_layout(title = "Median Household Income in the DMV Area")
# Map the median income
tm_shape(dmv_data) +
tm_polygons("Median_Income",
style = "quantile",
palette = "Blues",
title = "Median Household Income") +
tm_layout(title = "Median Household Income in the DMV Area")
# Save the plot
tmap_save(tm, "median_income_map.png")
# Map the median income
tm_shape(dmv_data) +
tm_polygons("Median_Income",
style = "quantile",
palette = "Blues",
title = "Median Household Income") +
tm_layout(title = "Median Household Income in the DMV Area")
# Save the plot
tmap()
# Map the median income
a<-tm_shape(dmv_data) +
tm_polygons("Median_Income",
style = "quantile",
palette = "Blues",
title = "Median Household Income") +
tm_layout(title = "Median Household Income in the DMV Area")
a
# Transform the CRS of the ACS data to match the DMV shapefile
acs_data <- st_transform(acs_data, st_crs(dmv))
# Perform the spatial subset
dmv_data <- acs_data[dmv, ,op = st_intersects]
mapview(dmv_data,z='Median_Income')
library(ineq)
gini_index <- Gini(dmv_data$Median_Income)
# Print the Gini index
print(gini_index)
library(ineq)
gini_index <- Gini(dmv_data$Median_Income)
# Print the Gini index
print(gini_index)
mapview(dmv_data,z='Median_Income')
st_write(acs_data, "acs_data_dmv.shp", append='FALSE')
st_write(acs_data, "acs_data_dmv.shp", append = 'FALSE')
mapview(acs_data,z='Median-Income')
acs_data <- get_acs(geography = "tract",
variables = "B19013_001",
state = c("DC", "MD", "VA"),
geometry = TRUE)
colnames(acs_data) <- c("GEOID", "NAME", "variable","Median_Income", "moe","geometry")
mapview(acs_data,z='Median_Income')
dmv_data$NAME
# Download the metropolitan statistical areas
cbsa <- core_based_statistical_areas(cb = TRUE, year = 2021)
# Filter for Richmond, VA metropolitan statistical area
richmond_metro <- cbsa[cbsa$NAME == "Richmond, VA", ]
mapview(richmond_metro)
st_write(richmond_metro,'richmond_metro.shp')
richmond_metro <- st_make_valid(richmond_metro)
st_write(richmond_metro,'richmond_metro.shp',delete_dsn = 'T')
st_write(richmond_metro,'richmond_metro.shp',delete_dsn = TRUE)
